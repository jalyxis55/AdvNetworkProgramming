Jennifer Shelby
ANP - Summer I 2020
Assignment 2
README.txt

1. Please write a short program that will disable Nagle’s algorithm. The program can be adapted from
   the client server code in the textbook (such as from Chapter 5, but be sure not to use the fgets and fputs functions as they belong to C standard library and buffer input and output). Describe the behaviours of the program after Nagle’s algorithm is disabled and after Nagle’s algorithm is enabled.
   		a. Steps to run:
   		   - Move JenniferShelby_Assign2a_Cli.c and JenniferShelby_Assign2a_Serv.c to the directory you
   		     will want to run them from
   		   -Run:
   		   		gcc -o cli JenniferShelby_Assign2a_Cli.c
   		   		gcc -o serv JenniferShelby_Assign2a_Serv.c
   		   -Code is shipped with Nagle's algorith disabled. To enable, comment out lines 55 and 56 in 
   		    JenniferShelby_Assign2a_Cli.c
   		b. This was very difficult to test as the two school machines are on the same subnet and there
   		   is nearly no delay between them already.
   		c. With Nagle's algorithm disabled, the client should not wait to continue sending packets to
   		   the server, even if it hasn't received a reply yet theoretically shortening the time it takes to send all 10,000 packets (in the case of my program). With Nagle's algorithm enabled, the client should be waiting to send packets until it receives an ACK from the server before continuing to send packets.

2.  This problem is pertaining to pthreads. You need to write and submit a program to test and support your answer.
		a. Steps to run:
			-Move JenniferShelby_Assign2b.c to the directory you want to run it from
			-Run:
				gcc -pthread -o 2b JenniferShelby_Assign2b.c
			-Each question below is selected from a switch. Options 1-5.
	(1) Can a thread still exist if the thread that creates it terminates by calling pthread exit()?
			Yes, pthread_exit() will only terminate the process; other threads will continue until they return or they call pthread_exit().
	(2) Can a detached thread still exist if the main thread of the whole processterminates by calling
	    exit function?
	    	No, if the main thread calls exit() the detached thread will be terminated.
	(3) Will the process still continue if one of the normal (not detached) and non-main threads within
		it calls exit function?
			No, any process associated with the thread will terminate if the thread calls exit() 
	(4) Can the original process still continue (hence all other threads within the process) if a
		detached thread calls exit function to terminate?
			No, if a detached thread calls exit(), since it is part of the process it will terminate the process.
	(5) Can the process still continue if the main thread terminates normally (ie the control of the
		main thread falls off the last statement of the main function)? Can the main thread detach itself?
			No, the thread will terminate and kill the process and all associated threads.
			Yes, the main thread can detach itself with pthread_detach(pthread_self()).

3. This problem is pertaining the thread-specific data technique discussed in class.
	(1) Compile and run the thread version of TCP client-server program that uses the thread-safe
		readline function in Fig.26.11 and 26.12 (p.692 & p.693). Verify (print if possible) the value returned in the variable rl key. Does each thread have the same rl key value?
			Yes, the key value is the same for all threads.
	(2) Can a thread use more than one thread-specific data item? Modify the program in (1) to
		demonstrate your answer. Please provide detailed comments explaining the purpose of each thread-related function call.
			Yes, you can create another key for that thread data. 

4.  (1) The readline function in Fig.26.12, p.693 calls pthread once at line 42. What is the purpose of
		this function call? What will happen if that function is not called? Does the readline function still work correctly without making the function call?
			Pthread_once() uses the value in rl_once to gurarantee that a key is created and the readline_once function is only called one time. If not called, a key will not be created. No, if this function call is not made, readline will not work correctly.
	(2) Why is the return value of the my read function (called by readline) of static type? What is
		the consequence of changing it to no-static?
			Static functions in C limits the scopt to its object file. This limits visibility of the function from other object files. If the function is changed to not static, the scope of the function increases to other object files. 
